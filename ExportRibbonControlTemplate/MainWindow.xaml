<Window
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:ExportRibbonControlTemplate"
        xmlns:Primitives="clr-namespace:System.Windows.Controls.Ribbon.Primitives;assembly=System.Windows.Controls.Ribbon" x:Class="ExportRibbonControlTemplate.MainWindow"
        mc:Ignorable="d"
        Title="MainWindow" Height="350" Width="525">

    <Window.Resources>
        <ControlTemplate x:Key="RibbonTabControlTemplate1" TargetType="{x:Type RibbonTab}">
            <Grid x:Name="MainGrid" ClipToBounds="True">
                <Grid.Visibility>
                    <TemplateBinding Property="IsSelected">
                        <TemplateBinding.Converter>
                            <BooleanToVisibilityConverter/>
                        </TemplateBinding.Converter>
                    </TemplateBinding>
                </Grid.Visibility>
                <Line x:Name="OuterLeftLine" Stroke="{Binding ContextualTabGroup.Background, RelativeSource={RelativeSource TemplatedParent}}" StrokeThickness="2" X1="0" X2="{Binding TabHeaderLeft, RelativeSource={RelativeSource TemplatedParent}}" Y1="0" Y2="0"/>
                <Line x:Name="OuterRightLine" Stroke="{Binding ContextualTabGroup.Background, RelativeSource={RelativeSource TemplatedParent}}" StrokeThickness="2" X1="{Binding TabHeaderRight, RelativeSource={RelativeSource TemplatedParent}}" X2="{Binding ActualWidth, RelativeSource={RelativeSource TemplatedParent}}" Y1="0" Y2="0"/>
                <ScrollViewer x:Name="ScrollViewer">
                    <ScrollViewer.Style>
                        <Style TargetType="{x:Type ScrollViewer}">
                            <Setter Property="Focusable" Value="False"/>
                            <Setter Property="VerticalScrollBarVisibility" Value="Disabled"/>
                            <Setter Property="HorizontalScrollBarVisibility" Value="Auto"/>
                            <Setter Property="CanContentScroll" Value="True"/>
                            <Setter Property="Template">
                                <Setter.Value>
                                    <ControlTemplate TargetType="{x:Type ScrollViewer}">
                                        <Grid x:Name="Grid" Background="{TemplateBinding Background}">
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="Auto"/>
                                                <ColumnDefinition Width="*"/>
                                                <ColumnDefinition Width="Auto"/>
                                            </Grid.ColumnDefinitions>
                                            <ScrollContentPresenter x:Name="PART_ScrollContentPresenter" CanContentScroll="{TemplateBinding CanContentScroll}" CanHorizontallyScroll="False" Grid.ColumnSpan="3" CanVerticallyScroll="False" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" Margin="{TemplateBinding Padding}"/>
                                            <RepeatButton Grid.Column="0" CommandTarget="{Binding RelativeSource={RelativeSource TemplatedParent}}" Command="ScrollBar.LineLeftCommand" Focusable="False" HorizontalContentAlignment="Left">
                                                <RepeatButton.Style>
                                                    <Style TargetType="{x:Type RepeatButton}">
                                                        <Setter Property="OverridesDefaultStyle" Value="True"/>
                                                        <Setter Property="Focusable" Value="False"/>
                                                        <Setter Property="Width" Value="14"/>
                                                        <Setter Property="Background" Value="{Binding (RibbonControlService.Ribbon).Background, RelativeSource={RelativeSource Self}}"/>
                                                        <Setter Property="BorderBrush" Value="{Binding (RibbonControlService.Ribbon).BorderBrush, RelativeSource={RelativeSource Self}}"/>
                                                        <Setter Property="Template">
                                                            <Setter.Value>
                                                                <ControlTemplate TargetType="{x:Type RepeatButton}">
                                                                    <Border x:Name="OuterBorder" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="1" Background="{TemplateBinding Background}" CornerRadius="3,0,0,3">
                                                                        <Border x:Name="InnerBorder" Background="#80FFFFFF" CornerRadius="3,0,0,3">
                                                                            <Path x:Name="GlyphPath" Data="M4,0L0,3.5 4,7" Fill="Gray" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                                                                        </Border>
                                                                    </Border>
                                                                    <ControlTemplate.Triggers>
                                                                        <Trigger Property="HorizontalContentAlignment" Value="Right">
                                                                            <Setter Property="Data" TargetName="GlyphPath" Value="M0,0L4,3.5 0,7"/>
                                                                            <Setter Property="CornerRadius" TargetName="OuterBorder" Value="0,3,3,0"/>
                                                                            <Setter Property="CornerRadius" TargetName="InnerBorder" Value="0,3,3,0"/>
                                                                        </Trigger>
                                                                        <MultiDataTrigger>
                                                                            <MultiDataTrigger.Conditions>
                                                                                <Condition Binding="{Binding (0)}" Value="False"/>
                                                                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="True"/>
                                                                            </MultiDataTrigger.Conditions>
                                                                            <Setter Property="Background" TargetName="InnerBorder" Value="{Binding (RibbonControlService.Ribbon).MouseOverBackground, RelativeSource={RelativeSource Self}}"/>
                                                                        </MultiDataTrigger>
                                                                        <MultiDataTrigger>
                                                                            <MultiDataTrigger.Conditions>
                                                                                <Condition Binding="{Binding (0)}" Value="False"/>
                                                                                <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="True"/>
                                                                            </MultiDataTrigger.Conditions>
                                                                            <Setter Property="Background" TargetName="InnerBorder" Value="{Binding (RibbonControlService.Ribbon).PressedBackground, RelativeSource={RelativeSource Self}}"/>
                                                                        </MultiDataTrigger>
                                                                        <DataTrigger Binding="{Binding (0)}" Value="True">
                                                                            <Setter Property="CornerRadius" TargetName="OuterBorder" Value="0"/>
                                                                            <Setter Property="BorderBrush" TargetName="OuterBorder" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"/>
                                                                            <Setter Property="Background" TargetName="OuterBorder" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
                                                                            <Setter Property="CornerRadius" TargetName="InnerBorder" Value="0"/>
                                                                            <Setter Property="Background" TargetName="InnerBorder" Value="Transparent"/>
                                                                            <Setter Property="Fill" TargetName="GlyphPath" Value="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}"/>
                                                                        </DataTrigger>
                                                                        <MultiDataTrigger>
                                                                            <MultiDataTrigger.Conditions>
                                                                                <Condition Binding="{Binding (0)}" Value="True"/>
                                                                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="True"/>
                                                                            </MultiDataTrigger.Conditions>
                                                                            <Setter Property="Background" TargetName="InnerBorder" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                                                                        </MultiDataTrigger>
                                                                        <MultiDataTrigger>
                                                                            <MultiDataTrigger.Conditions>
                                                                                <Condition Binding="{Binding (0)}" Value="True"/>
                                                                                <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="True"/>
                                                                            </MultiDataTrigger.Conditions>
                                                                            <Setter Property="BorderBrush" TargetName="OuterBorder" Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}"/>
                                                                        </MultiDataTrigger>
                                                                    </ControlTemplate.Triggers>
                                                                </ControlTemplate>
                                                            </Setter.Value>
                                                        </Setter>
                                                    </Style>
                                                </RepeatButton.Style>
                                                <RepeatButton.Visibility>
                                                    <MultiBinding ConverterParameter="0" FallbackValue="Visibility.Collapsed" UpdateSourceTrigger="Default">
                                                        <MultiBinding.Converter>
                                                            <Primitives:RibbonScrollButtonVisibilityConverter/>
                                                        </MultiBinding.Converter>
                                                        <Binding Path="ComputedHorizontalScrollBarVisibility" RelativeSource="{RelativeSource TemplatedParent}"/>
                                                        <Binding Path="HorizontalOffset" RelativeSource="{RelativeSource TemplatedParent}"/>
                                                        <Binding Path="ExtentWidth" RelativeSource="{RelativeSource TemplatedParent}"/>
                                                        <Binding Path="ViewportWidth" RelativeSource="{RelativeSource TemplatedParent}"/>
                                                    </MultiBinding>
                                                </RepeatButton.Visibility>
                                            </RepeatButton>
                                            <RepeatButton Grid.Column="2" CommandTarget="{Binding RelativeSource={RelativeSource TemplatedParent}}" Command="ScrollBar.LineRightCommand" Focusable="False" HorizontalContentAlignment="Right">
                                                <RepeatButton.Style>
                                                    <Style TargetType="{x:Type RepeatButton}">
                                                        <Setter Property="OverridesDefaultStyle" Value="True"/>
                                                        <Setter Property="Focusable" Value="False"/>
                                                        <Setter Property="Width" Value="14"/>
                                                        <Setter Property="Background" Value="{Binding (RibbonControlService.Ribbon).Background, RelativeSource={RelativeSource Self}}"/>
                                                        <Setter Property="BorderBrush" Value="{Binding (RibbonControlService.Ribbon).BorderBrush, RelativeSource={RelativeSource Self}}"/>
                                                        <Setter Property="Template">
                                                            <Setter.Value>
                                                                <ControlTemplate TargetType="{x:Type RepeatButton}">
                                                                    <Border x:Name="OuterBorder" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="1" Background="{TemplateBinding Background}" CornerRadius="3,0,0,3">
                                                                        <Border x:Name="InnerBorder" Background="#80FFFFFF" CornerRadius="3,0,0,3">
                                                                            <Path x:Name="GlyphPath" Data="M4,0L0,3.5 4,7" Fill="Gray" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                                                                        </Border>
                                                                    </Border>
                                                                    <ControlTemplate.Triggers>
                                                                        <Trigger Property="HorizontalContentAlignment" Value="Right">
                                                                            <Setter Property="Data" TargetName="GlyphPath" Value="M0,0L4,3.5 0,7"/>
                                                                            <Setter Property="CornerRadius" TargetName="OuterBorder" Value="0,3,3,0"/>
                                                                            <Setter Property="CornerRadius" TargetName="InnerBorder" Value="0,3,3,0"/>
                                                                        </Trigger>
                                                                        <MultiDataTrigger>
                                                                            <MultiDataTrigger.Conditions>
                                                                                <Condition Binding="{Binding (0)}" Value="False"/>
                                                                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="True"/>
                                                                            </MultiDataTrigger.Conditions>
                                                                            <Setter Property="Background" TargetName="InnerBorder" Value="{Binding (RibbonControlService.Ribbon).MouseOverBackground, RelativeSource={RelativeSource Self}}"/>
                                                                        </MultiDataTrigger>
                                                                        <MultiDataTrigger>
                                                                            <MultiDataTrigger.Conditions>
                                                                                <Condition Binding="{Binding (0)}" Value="False"/>
                                                                                <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="True"/>
                                                                            </MultiDataTrigger.Conditions>
                                                                            <Setter Property="Background" TargetName="InnerBorder" Value="{Binding (RibbonControlService.Ribbon).PressedBackground, RelativeSource={RelativeSource Self}}"/>
                                                                        </MultiDataTrigger>
                                                                        <DataTrigger Binding="{Binding (0)}" Value="True">
                                                                            <Setter Property="CornerRadius" TargetName="OuterBorder" Value="0"/>
                                                                            <Setter Property="BorderBrush" TargetName="OuterBorder" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"/>
                                                                            <Setter Property="Background" TargetName="OuterBorder" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
                                                                            <Setter Property="CornerRadius" TargetName="InnerBorder" Value="0"/>
                                                                            <Setter Property="Background" TargetName="InnerBorder" Value="Transparent"/>
                                                                            <Setter Property="Fill" TargetName="GlyphPath" Value="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}"/>
                                                                        </DataTrigger>
                                                                        <MultiDataTrigger>
                                                                            <MultiDataTrigger.Conditions>
                                                                                <Condition Binding="{Binding (0)}" Value="True"/>
                                                                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="True"/>
                                                                            </MultiDataTrigger.Conditions>
                                                                            <Setter Property="Background" TargetName="InnerBorder" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                                                                        </MultiDataTrigger>
                                                                        <MultiDataTrigger>
                                                                            <MultiDataTrigger.Conditions>
                                                                                <Condition Binding="{Binding (0)}" Value="True"/>
                                                                                <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="True"/>
                                                                            </MultiDataTrigger.Conditions>
                                                                            <Setter Property="BorderBrush" TargetName="OuterBorder" Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}"/>
                                                                        </MultiDataTrigger>
                                                                    </ControlTemplate.Triggers>
                                                                </ControlTemplate>
                                                            </Setter.Value>
                                                        </Setter>
                                                    </Style>
                                                </RepeatButton.Style>
                                                <RepeatButton.Visibility>
                                                    <MultiBinding ConverterParameter="100" FallbackValue="Visibility.Collapsed" UpdateSourceTrigger="Default">
                                                        <MultiBinding.Converter>
                                                            <Primitives:RibbonScrollButtonVisibilityConverter/>
                                                        </MultiBinding.Converter>
                                                        <Binding Path="ComputedHorizontalScrollBarVisibility" RelativeSource="{RelativeSource TemplatedParent}"/>
                                                        <Binding Path="HorizontalOffset" RelativeSource="{RelativeSource TemplatedParent}"/>
                                                        <Binding Path="ExtentWidth" RelativeSource="{RelativeSource TemplatedParent}"/>
                                                        <Binding Path="ViewportWidth" RelativeSource="{RelativeSource TemplatedParent}"/>
                                                    </MultiBinding>
                                                </RepeatButton.Visibility>
                                            </RepeatButton>
                                        </Grid>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                        </Style>
                    </ScrollViewer.Style>
                    <Grid RenderOptions.ClearTypeHint="Enabled">
                        <Canvas x:Name="BackgroundCanvas" HorizontalAlignment="Left" Height="0" Margin="0,1,0,0" VerticalAlignment="Top" Width="0">
                            <Rectangle x:Name="OpaqueRect" Fill="{Binding (RibbonControlService.Ribbon).Background, RelativeSource={RelativeSource Self}}" Height="{Binding ActualHeight, ElementName=ScrollViewer}" Width="{Binding ActualWidth, ElementName=ScrollViewer}"/>
                            <Rectangle x:Name="OverlayRect" Height="{Binding ActualHeight, ElementName=ScrollViewer}" Width="{Binding ActualWidth, ElementName=ScrollViewer}">
                                <Rectangle.Fill>
                                    <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                        <GradientStop Color="#EEFFFFFF" Offset="0"/>
                                        <GradientStop Color="#BBFFFFFF" Offset="0.1"/>
                                        <GradientStop Color="#05FFFFFF" Offset="0.5"/>
                                        <GradientStop Color="#20FFFFFF" Offset="1"/>
                                    </LinearGradientBrush>
                                </Rectangle.Fill>
                            </Rectangle>
                            <Rectangle x:Name="InnerOverlayRect" Fill="#60FFFFFF" Height="{Binding ActualHeight, ElementName=ScrollViewer}" Width="{Binding ActualWidth, ElementName=ScrollViewer}"/>
                        </Canvas>
                        <ItemsPresenter x:Name="ItemsPresenter"/>
                    </Grid>
                </ScrollViewer>
            </Grid>
            <ControlTemplate.Triggers>
                <Trigger Property="CanContentScroll" SourceName="ScrollViewer" Value="False">
                    <Setter Property="Canvas.Top" TargetName="OpaqueRect" Value="{Binding VerticalOffset, ElementName=ScrollViewer}"/>
                    <Setter Property="Canvas.Left" TargetName="OpaqueRect" Value="{Binding HorizontalOffset, ElementName=ScrollViewer}"/>
                    <Setter Property="Canvas.Top" TargetName="OverlayRect" Value="{Binding VerticalOffset, ElementName=ScrollViewer}"/>
                    <Setter Property="Canvas.Left" TargetName="OverlayRect" Value="{Binding HorizontalOffset, ElementName=ScrollViewer}"/>
                    <Setter Property="Canvas.Top" TargetName="InnerOverlayRect" Value="{Binding VerticalOffset, ElementName=ScrollViewer}"/>
                    <Setter Property="Canvas.Left" TargetName="InnerOverlayRect" Value="{Binding HorizontalOffset, ElementName=ScrollViewer}"/>
                </Trigger>
                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding (0)}" Value="False"/>
                        <Condition Binding="{Binding ContextualTabGroup, RelativeSource={RelativeSource Self}}" Value="{x:Null}"/>
                    </MultiDataTrigger.Conditions>
                    <Setter Property="Stroke" TargetName="OuterLeftLine" Value="{Binding Ribbon.BorderBrush, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type RibbonTab}}}"/>
                    <Setter Property="Stroke" TargetName="OuterRightLine" Value="{Binding Ribbon.BorderBrush, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type RibbonTab}}}"/>
                </MultiDataTrigger>
                <DataTrigger Binding="{Binding (0)}" Value="True">
                    <Setter Property="Visibility" TargetName="BackgroundCanvas" Value="Collapsed"/>
                    <Setter Property="Stroke" TargetName="OuterLeftLine" Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}"/>
                    <Setter Property="Stroke" TargetName="OuterRightLine" Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}"/>
                </DataTrigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>
    </Window.Resources>

    <Grid>
        <Ribbon>
            <RibbonTab Template="{DynamicResource RibbonTabControlTemplate1}">
                <RibbonButton/>
            </RibbonTab>
        </Ribbon>
    </Grid>
</Window>
